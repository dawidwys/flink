/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("org.apache.flink.java-conventions")
}

val testArtifacts: Configuration by configurations.creating

dependencies {
    implementation(project(":flink-core"))
    implementation(project(":flink-rpc-core"))
    implementation(project(":flink-rpc-akka-loader"))
    implementation(project(":flink-java"))
    implementation(project(":flink-queryable-state-client-java"))
    implementation(project(":flink-hadoop-fs"))
    implementation("org.apache.commons:commons-math3:3.6.1")
    implementation("org.apache.hadoop:hadoop-common:2.4.1")
    implementation("org.apache.hadoop:hadoop-hdfs:2.4.1")
    implementation("org.apache.hadoop:hadoop-mapreduce-client-core:2.4.1")
    implementation("commons-io:commons-io:2.11.0")
    implementation("org.apache.flink:flink-shaded-netty:4.1.65.Final-14.0")
    implementation("org.apache.flink:flink-shaded-guava:30.1.1-jre-14.0")
    implementation("org.apache.flink:flink-shaded-jackson:2.12.4-14.0")
    implementation("org.apache.flink:flink-shaded-zookeeper-3:3.4.14-14.0")
    implementation("org.apache.commons:commons-lang3:3.3.2")
    implementation("commons-cli:commons-cli:1.5.0")
    implementation("org.javassist:javassist:3.24.0-GA")
    implementation("org.xerial.snappy:snappy-java:1.1.8.3")
    implementation("org.lz4:lz4-java:1.8.0")
    implementation("com.github.oshi:oshi-core:3.4.0")
    testImplementation(project(":flink-rpc-akka-loader"))
    testImplementation(project(":flink-test-utils-junit"))
    testImplementation(project(":flink-metrics-core", "testArtifacts"))
    testImplementation(project(":flink-core", "testArtifacts"))
    testImplementation("org.apache.flink:flink-shaded-netty-tcnative-dynamic:2.0.39.Final-14.0")
    testImplementation("org.apache.curator:curator-test:2.12.0")
    testImplementation("com.squareup.okhttp3:okhttp:3.7.0")
    testImplementation("com.esotericsoftware.kryo:kryo:2.24.0")
}

description = "Flink : Runtime"

val testsJar by tasks.registering(Jar::class) {
    archiveClassifier.set("tests")
    from(sourceSets["test"].output)
}

(publishing.publications["maven"] as MavenPublication).artifact(testsJar)

artifacts {
    add("testArtifacts", testsJar)
}

tasks.withType(Test::class) {
    minHeapSize = "256m"
    maxHeapSize = "2048m"
    setForkEvery(1L)
}
